#!/bin/bash

# This script is run during the publish_layer workflow,
# and it is responsible for replacing the layer ARN in our documentation,
# based on the output files generated by CDK.
#
# see .github/workflows/publish_layer.yml

set -eo pipefail

if [[ $# -ne 1 ]]; then
  cat <<EOM
Usage: $(basename $0) cdk-output-dir

cdk-output-dir: directory containing the cdk output files generated when deploying the Layer
EOM
  exit 1
fi

CDK_OUTPUT_DIR=$1
DOCS_FILE="docs/getting-started/lambda-layers.md"

# Check if CDK output dir is a directory
if [ ! -d "$CDK_OUTPUT_DIR" ]; then
  echo "No $CDK_OUTPUT_DIR directory found, not replacing lambda layer versions"
  exit 1
fi

# Process each file inside the directory
files="$CDK_OUTPUT_DIR/*"
for file in $files; do
  echo "[+] Processing: $file"

  # Process each line inside the file
  lines=$(cat "$file")
  for line in $lines; do
    echo -e "\t[*] ARN: $line"
    # line = arn:aws:lambda:us-east-1:094274105915:layer:AWSLambdaPowertoolsTypeScript:49

    # From the full ARN, extract everything but the version at the end. This prefix
    # will later be used to find/replace the ARN on the documentation file.
    prefix=$(echo "$line" | cut -d ':' -f 1-7)
    # prefix = arn:aws:lambda:us-east-1:094274105915:layer:AWSLambdaPowertoolsTypeScript

    # Now replace the all "prefix"s in the file with the full new Layer ARN (line)
    # prefix:\d+ ==> line
    # sed doesn't support \d+ in a portable way, so we cheat with (:digit: :digit: *)
    sed -i -e "s/$prefix:[[:digit:]][[:digit:]]*/$line/g" $DOCS_FILE

    # We use the eu-central-1 layer as the version for all the frameworks (SAM, CDK, SLS, etc)
    # We could have used any other region. What's important is the version at the end.

    # Examples of strings found in the documentation with pseudo regions:
    # arn:aws:lambda:{region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:39
    # arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:39
    # arn:aws:lambda:${aws:region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:39
    # arn:aws:lambda:{env.region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:39
    if [[ "$line" == *"eu-central-1"* ]]; then
      # These are all the framework pseudo parameters currently found in the docs
      for pseudo_region in '{region}' '${AWS::Region}' '${aws:region}' '{aws::region}' '{env.region}' '${Stack.of(this).region}' '${aws.getRegionOutput().name}'; do
        prefix_pseudo_region=$(echo "$prefix" | sed "s/eu-central-1/${pseudo_region}/")
        # prefix_pseudo_region = arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScript

        line_pseudo_region=$(echo "$line" | sed "s/eu-central-1/${pseudo_region}/")
        # line_pseudo_region = arn:aws:lambda:${AWS::Region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:49

        # Replace all the "prefix_pseudo_region"'s in the file
        # prefix_pseudo_region:\d+ ==> line_pseudo_region
        sed -i -e "s/$prefix_pseudo_region:[[:digit:]][[:digit:]]*/$line_pseudo_region/g" $DOCS_FILE
      done
    fi
  done
done

echo "[+] Finished processing all commercial regions"

# Now we need to process GovCloud regions
# 
# GovCloud layers are not available in the CDK output files, but we know the ARN format and that the version is the same
# as the one in eu-central-1. So we can optimistically update the version of the GovCloud layers in the documentation.
#
# The GovCloud ARNs are (note that the account IDs are different in both):
# arn:aws-us-gov:lambda:us-gov-west-1:165093116878:layer:AWSLambdaPowertoolsTypeScriptV2:25
# arn:aws-us-gov:lambda:us-gov-east-1:165087284144:layer:AWSLambdaPowertoolsTypeScriptV2:25

version=$(echo "$line" | cut -d ':' -f 8) # version = 25
arn_us_gov_west_1="arn:aws-us-gov:lambda:us-gov-west-1:165093116878:layer:AWSLambdaPowertoolsTypeScriptV2:$version"
prefix_us_gov_west_1=$(echo "$arn_us_gov_west_1" | cut -d ':' -f 1-7)
arn_us_gov_east_1="arn:aws-us-gov:lambda:us-gov-east-1:165087284144:layer:AWSLambdaPowertoolsTypeScriptV2:$version"
prefix_us_gov_east_1=$(echo "$arn_us_gov_east_1" | cut -d ':' -f 1-7)
echo -e "\t[*] ARN GovCloud US West 1: $arn_us_gov_west_1"
echo -e "\t[*] ARN GovCloud US East 1: $arn_us_gov_east_1"
# Replace all the "arn_us_gov_west_1"'s in the file
sed -i -e "s/$prefix_us_gov_west_1:[[:digit:]][[:digit:]]*/$arn_us_gov_west_1/g" $DOCS_FILE
# Replace all the "arn_us_gov_east_1"'s in the file
sed -i -e "s/$prefix_us_gov_east_1:[[:digit:]][[:digit:]]*/$arn_us_gov_east_1/g" $DOCS_FILE
echo "[+] Finished processing all GovCloud regions"
echo "[+] Finished processing all regions"