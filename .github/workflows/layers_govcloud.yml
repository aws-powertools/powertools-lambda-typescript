name: Layer Deployment (GovCloud)

# GovCloud Layer Publish
# ---
# This workflow publishes a specific layer version in an AWS account based on the environment input.
#
# We pull each the version of the layer and store them as artifacts, the we upload them to each of the GovCloud AWS accounts.
#
# A number of safety checks are performed to ensure safety.

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        type: choice
        options:
          - Gamma
          - Prod
        required: true
      version:
        description: Layer version to duplicate
        type: string
        required: true
  workflow_call:
    inputs:
      environment:
        description: Deployment environment
        type: string
        required: true
      version:
        description: Layer version to duplicate
        type: string
        required: true

run-name: Layer Deployment (GovCloud) - ${{ inputs.environment }} - version - ${{ inputs.version }}

permissions:
  contents: read

jobs:
  download:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: Prod (Readonly)
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-east-1
          mask-aws-account-id: true
      - name: Grab Zip
        run: |
          aws --region us-east-1 lambda get-layer-version-by-arn --arn arn:aws:lambda:us-east-1:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:${{ inputs.version }} --query 'Content.Location' | xargs curl -L -o AWSLambdaPowertoolsTypeScriptV2.zip
          aws --region us-east-1 lambda get-layer-version-by-arn --arn arn:aws:lambda:us-east-1:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:${{ inputs.version }} > AWSLambdaPowertoolsTypeScriptV2.json
      - name: Store Zip
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.zip
          path: AWSLambdaPowertoolsTypeScriptV2.zip
          retention-days: 1
          if-no-files-found: error
      - name: Store Metadata
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.json
          path: AWSLambdaPowertoolsTypeScriptV2.json
          retention-days: 1
          if-no-files-found: error

  copy_east:
    name: Copy (East)
    needs: download
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: GovCloud ${{ inputs.environment }} (East)
    steps:
      - name: Download Zip
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.zip
      - name: Download Metadata
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.json
      - name: Verify Layer Signature
        run: |
          SHA=$(jq -r '.Content.CodeSha256' 'AWSLambdaPowertoolsTypeScriptV2.json')
          test "$(openssl dgst -sha256 -binary AWSLambdaPowertoolsTypeScriptV2.zip | openssl enc -base64)" == "$SHA" && echo "SHA OK: ${SHA}" || exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-gov-east-1
          mask-aws-account-id: true
      - name: Create Layer
        id: create-layer
        run: |
          LAYER_VERSION=$(aws --region us-gov-east-1 lambda publish-layer-version \
            --layer-name AWSLambdaPowertoolsTypeScriptV2 \
            --zip-file fileb://./AWSLambdaPowertoolsTypeScriptV2.zip \
            --compatible-runtimes "$(echo \"$(jq -r  '.CompatibleRuntimes | join(" ")' 'AWSLambdaPowertoolsTypeScriptV2.json')\" | sed -e "s/ /\" \"/g")" \
            --license-info "MIT-0" \
            --description "$(jq -r '.Description' 'AWSLambdaPowertoolsTypeScriptV2.json')" \
            --query 'Version' \
            --output text)

          echo "LAYER_VERSION=$LAYER_VERSION" >> "$GITHUB_OUTPUT"

          aws --region us-gov-east-1 lambda add-layer-version-permission \
            --layer-name 'AWSLambdaPowertoolsTypeScriptV2' \
            --statement-id 'PublicLayer' \
            --action lambda:GetLayerVersion \
            --principal '*' \
            --version-number "$LAYER_VERSION"
      - name: Verify Layer
        env:
          LAYER_VERSION: ${{ steps.create-layer.outputs.LAYER_VERSION }}
        run: |
          REMOTE_SHA=$(aws --region us-gov-east-1 lambda get-layer-version-by-arn --arn 'arn:aws-us-gov:lambda:us-gov-east-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:AWSLambdaPowertoolsTypeScriptV2:${{ env.LAYER_VERSION }}' --query 'Content.CodeSha256' --output text)
          SHA=$(jq -r '.Content.CodeSha256' 'AWSLambdaPowertoolsTypeScriptV2.json')
          test "$REMOTE_SHA" == "$SHA" && echo "SHA OK: ${SHA}" || exit 1
          aws --region us-gov-east-1 lambda get-layer-version-by-arn --arn 'arn:aws-us-gov:lambda:us-gov-east-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:AWSLambdaPowertoolsTypeScriptV2:${{ env.LAYER_VERSION }}' --output table

  copy_west:
    name: Copy (West)
    needs: download
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: GovCloud ${{ inputs.environment }} (West)
    steps:
      - name: Download Zip
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.zip
      - name: Download Metadata
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.json
      - name: Verify Layer Signature
        run: |
          SHA=$(jq -r '.Content.CodeSha256' 'AWSLambdaPowertoolsTypeScriptV2.json')
          test "$(openssl dgst -sha256 -binary AWSLambdaPowertoolsTypeScriptV2.zip | openssl enc -base64)" == "$SHA" && echo "SHA OK: ${SHA}" || exit 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-gov-west-1
          mask-aws-account-id: true
      - name: Create Layer
        id: create-layer
        run: |
          LAYER_VERSION=$(aws --region us-gov-west-1 lambda publish-layer-version \
            --layer-name AWSLambdaPowertoolsTypeScriptV2 \
            --zip-file fileb://./AWSLambdaPowertoolsTypeScriptV2.zip \
            --compatible-runtimes "$(echo \"$(jq -r  '.CompatibleRuntimes | join(" ")' 'AWSLambdaPowertoolsTypeScriptV2.json')\" | sed -e "s/ /\" \"/g")" \
            --license-info "MIT-0" \
            --description "$(jq -r '.Description' 'AWSLambdaPowertoolsTypeScriptV2.json')" \
            --query 'Version' \
            --output text)

          echo "LAYER_VERSION=$LAYER_VERSION" >> "$GITHUB_OUTPUT"

          aws --region us-gov-west-1 lambda add-layer-version-permission \
            --layer-name 'AWSLambdaPowertoolsTypeScriptV2' \
            --statement-id 'PublicLayer' \
            --action lambda:GetLayerVersion \
            --principal '*' \
            --version-number "$LAYER_VERSION"
      - name: Verify Layer
        env:
          LAYER_VERSION: ${{ steps.create-layer.outputs.LAYER_VERSION }}
        run: |
          REMOTE_SHA=$(aws --region us-gov-west-1 lambda get-layer-version-by-arn --arn 'arn:aws-us-gov:lambda:us-gov-west-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:AWSLambdaPowertoolsTypeScriptV2:${{ env.LAYER_VERSION }}' --query 'Content.CodeSha256' --output text)
          SHA=$(jq -r '.Content.CodeSha256' 'AWSLambdaPowertoolsTypeScriptV2.json')
          test "$REMOTE_SHA" == "$SHA" && echo "SHA OK: ${SHA}" || exit 1
          aws --region us-gov-west-1 lambda get-layer-version-by-arn --arn 'arn:aws-us-gov:lambda:us-gov-west-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:AWSLambdaPowertoolsTypeScriptV2:${{ env.LAYER_VERSION }}' --output table
