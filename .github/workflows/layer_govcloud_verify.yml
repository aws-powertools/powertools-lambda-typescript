# GovCloud Layer Verification
# ---
# This workflow queries the GovCloud layer info in production only

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        type: choice
        options:
          - Gamma
          - Prod
        required: true
      version:
        description: Layer version to verify
        type: string
        required: true
      govcloud_version:
        description: GovCloud Layer version to verify, this is mostly used in Gamma where a version mismatch might exist
        type: string
        required: false

  workflow_call:
    inputs:
      environment:
        description: Deployment environment
        type: string
        required: true
      version:
        description: Layer version to verify
        type: string
        required: true
      govcloud_version:
        description: GovCloud Layer version to verify, this is mostly used in Gamma where a version mismatch might exist
        type: string
        required: false

name: Layer Verification (GovCloud)
run-name: Layer Verification (GovCloud) / Version ${{ inputs.version }}

permissions: {}

jobs:
  commercial:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: Prod (Readonly)
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-east-1
          mask-aws-account-id: true
      - name: Output AWSLambdaPowertoolsTypeScriptV2
        # fetch the specific layer version information from the us-east-1 commercial region
        run: |
          aws --region us-east-1 lambda get-layer-version-by-arn --arn 'arn:aws:lambda:us-east-1:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:${{ inputs.version }}' > AWSLambdaPowertoolsTypeScriptV2.json
      - name: Store Metadata
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.json
          path: AWSLambdaPowertoolsTypeScriptV2.json
          retention-days: 1
          if-no-files-found: error

  verify:
    name: Verify
    needs: commercial
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: GovCloud ${{ inputs.environment }}
    strategy:
      matrix:
        region:
          - us-gov-east-1
          - us-gov-west-1
    steps:
      - name: Download Metadata
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: AWSLambdaPowertoolsTypeScriptV2.json
      - id: transform
        run: |
          echo 'CONVERTED_REGION=${{ matrix.region }}' | tr 'a-z\-' 'A-Z_' >> "$GITHUB_OUTPUT"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets[format('IAM_ROLE_{0}', steps.transform.outputs.CONVERTED_REGION)] }}
          aws-region: ${{ matrix.region}}
          mask-aws-account-id: true
      - id: govcloud_version
        name: GovCloud Layer Version
        run: |
          echo 'govcloud_version=$([[ -n "${{ inputs.govcloud_version}}" ]] && echo ${{ inputs.govcloud_version}} || echo ${{ inputs.version }} )' >> "$GITHUB_OUTPUT"
      - name: Verify Layer
        run: |
          export layer_output='AWSLambdaPowertoolsTypeScriptV2-${{matrix.region}}.json'
          aws --region ${{ matrix.region}} lambda get-layer-version-by-arn --arn "arn:aws-us-gov:lambda:${{ matrix.region}}:${{ secrets[format('AWS_ACCOUNT_{0}', steps.transform.outputs.CONVERTED_REGION)] }}:layer:AWSLambdaPowertoolsTypeScriptV2:${{ steps.govcloud_version.outputs.govcloud_version }}" > $layer_output
          REMOTE_SHA=$(jq -r '.Content.CodeSha256' $layer_output)
          LOCAL_SHA=$(jq -r '.Content.CodeSha256' AWSLambdaPowertoolsTypeScriptV2.json)
          test "$REMOTE_SHA" == "$LOCAL_SHA" && echo "SHA OK: ${LOCAL_SHA}" || exit 1
          jq -s -r '["Layer Arn", "Runtimes", "Version", "Description", "SHA256"], ([.[0], .[1]] | .[] | [.LayerArn, (.CompatibleRuntimes | join("/")), .Version, .Description, .Content.CodeSha256]) |@tsv' AWSLambdaPowertoolsTypeScriptV2.json $layer_output | column -t -s $'\t'